(load "./chapter3/33.scm")

(define (negator in out)
  (define (process-new-value)
    (cond ((has-value? in)
           (set-value! out
                       (- (get-value in))
                       me))
          ((has-value? out)
           (set-value! in
                       (- (get-value out))
                       me))
    )
  )
  (define (process-forget-value)
    (forget-value! out me)
    (forget-value! in me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- NEGATOR" request))))
  (connect in me)
  (connect out me)
  me)

(define (multiplicative-inverter in out)
  (define (process-new-value)
    (cond ((has-value? in)
           (set-value! out
                       (/ 1 (get-value in))
                       me))
          ((has-value? out)
           (set-value! in
                       (/ 1 (get-value out))
                       me))
    )
  )
  (define (process-forget-value)
    (forget-value! out me)
    (forget-value! in me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- MULTIPLICATIVE-INVERTER" request))))
  (connect in me)
  (connect out me)
  me)

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))

(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

(define (c- x y)
  (let ((z (make-connector)))
    (adder x (neg y) z)
    z))

(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier x (inv y) z)
    z))

(define (neg x)
  (let ((y (make-connector)))
    (negator x y)
    y
  )
)

(define (inv x)
  (let ((y (make-connector)))
    (multiplicative-inverter x y)
    y
  )
)

(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))

(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
(probe "F" F)
(probe "C" C)
(set-value! F 50 'user)