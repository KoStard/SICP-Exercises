(load "./chapter4/non-deterministic/ch4-ambeval.scm")

(define (shuffle lst)
    (define (nth l n)
        (if (= n 0) l (nth (cdr l) (- n 1)))
    )
    (define (duplicate-list-reverse l current)
        (if (null? l) current (duplicate-list-reverse (cdr l) (cons (car l) current)))
    )
    (define (internal-loop current-list current-result current-length)
        (if (null? current-list)
            current-result
            (let ((n (random current-length)))
                (if (= n 0)
                    (internal-loop (cdr current-list) (cons (car current-list) current-result) (- current-length 1))
                    (let ((parent-element (nth current-list (- n 1))))
                        (let ((element (cdr parent-element)))
                            (let ((value (car element)))
                                (set-cdr! parent-element (cdr element))
                                (internal-loop current-list (cons value current-result) (- current-length 1))
                            )
                        )
                    )
                )
            )
        )
    )
    (internal-loop (duplicate-list-reverse lst '()) '() (length lst))
)

(define (analyze-ramb exp)
    (let ((cprocs (map analyze (ramb-choices exp))))
    (lambda (env succeed fail)
        (define (try-next choices)
            (if (null? choices)
                (fail)
                ((car choices) env
                            succeed
                            (lambda ()
                                (try-next (cdr choices))))))
        (try-next cprocs))))

(define (ramb? exp) (tagged-list? exp 'ramb))
(define (ramb-choices exp) (shuffle (cdr exp)))

(define (analyze exp)
  (cond ((self-evaluating? exp) 
         (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((let? exp) (analyze (let->combination exp))) 
        ((amb? exp) (analyze-amb exp))                
        ((ramb? exp) (analyze-ramb exp))                
        ((application? exp) (analyze-application exp))
        (else
         (error "Unknown expression type -- ANALYZE" exp))))

(define the-global-environment (setup-environment))

(driver-loop)