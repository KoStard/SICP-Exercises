(load "./chapter4/11.base.scm")

(define (make-frame bindings)
  (list bindings))

(define (make-binding var val)
    (list var val)
)

(define (frame-bindings frame) (car frame))

(define (extend-environment bindings base-env)
    (cons (make-frame bindings) base-env)
)

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (car (car bindings)))
             (cadr (car bindings)))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (car (car bindings)))
             (set-car! (cdr (car bindings))))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define (add-binding-to-frame! var val frame)
    (set-car! frame (cons (make-binding var val) (frame-bindings frame)))
)

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (car (car bindings)))
             (set-car! (cdr (car bindings))))
            (else (scan (cdr bindings)))))
    (scan (frame-bindings frame))))

;;; (let ((env (extend-environment (list ) the-empty-environment)))
;;;     (define-variable! 'a 4 env)
;;;     (display (lookup-variable-value 'a env))
;;;     ;;; (display (frame-bindings (first-frame env)))
;;; )